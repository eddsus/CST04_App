//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAgent.SR_Synchronizer {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SR_Synchronizer.IAppServiceService")]
    public interface IAppServiceService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppServiceService/IsAlive", ReplyAction="http://tempuri.org/IAppServiceService/IsAliveResponse")]
        bool IsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppServiceService/IsAlive", ReplyAction="http://tempuri.org/IAppServiceService/IsAliveResponse")]
        System.Threading.Tasks.Task<bool> IsAliveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppServiceService/QueryOrders", ReplyAction="http://tempuri.org/IAppServiceService/QueryOrdersResponse")]
        System.Collections.Generic.List<SharedDataTypes.Order> QueryOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppServiceService/QueryOrders", ReplyAction="http://tempuri.org/IAppServiceService/QueryOrdersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<SharedDataTypes.Order>> QueryOrdersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppServiceService/QueryIngredients", ReplyAction="http://tempuri.org/IAppServiceService/QueryIngredientsResponse")]
        System.Collections.Generic.List<SharedDataTypes.Ingredient> QueryIngredients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppServiceService/QueryIngredients", ReplyAction="http://tempuri.org/IAppServiceService/QueryIngredientsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<SharedDataTypes.Ingredient>> QueryIngredientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppServiceService/QueryShapes", ReplyAction="http://tempuri.org/IAppServiceService/QueryShapesResponse")]
        System.Collections.Generic.List<SharedDataTypes.Shape> QueryShapes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppServiceService/QueryShapes", ReplyAction="http://tempuri.org/IAppServiceService/QueryShapesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<SharedDataTypes.Shape>> QueryShapesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppServiceService/QueryWrappings", ReplyAction="http://tempuri.org/IAppServiceService/QueryWrappingsResponse")]
        System.Collections.Generic.List<SharedDataTypes.Wrapping> QueryWrappings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAppServiceService/QueryWrappings", ReplyAction="http://tempuri.org/IAppServiceService/QueryWrappingsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<SharedDataTypes.Wrapping>> QueryWrappingsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAppServiceServiceChannel : DataAgent.SR_Synchronizer.IAppServiceService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AppServiceServiceClient : System.ServiceModel.ClientBase<DataAgent.SR_Synchronizer.IAppServiceService>, DataAgent.SR_Synchronizer.IAppServiceService {
        
        public AppServiceServiceClient() {
        }
        
        public AppServiceServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AppServiceServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AppServiceServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AppServiceServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IsAlive() {
            return base.Channel.IsAlive();
        }
        
        public System.Threading.Tasks.Task<bool> IsAliveAsync() {
            return base.Channel.IsAliveAsync();
        }
        
        public System.Collections.Generic.List<SharedDataTypes.Order> QueryOrders() {
            return base.Channel.QueryOrders();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<SharedDataTypes.Order>> QueryOrdersAsync() {
            return base.Channel.QueryOrdersAsync();
        }
        
        public System.Collections.Generic.List<SharedDataTypes.Ingredient> QueryIngredients() {
            return base.Channel.QueryIngredients();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<SharedDataTypes.Ingredient>> QueryIngredientsAsync() {
            return base.Channel.QueryIngredientsAsync();
        }
        
        public System.Collections.Generic.List<SharedDataTypes.Shape> QueryShapes() {
            return base.Channel.QueryShapes();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<SharedDataTypes.Shape>> QueryShapesAsync() {
            return base.Channel.QueryShapesAsync();
        }
        
        public System.Collections.Generic.List<SharedDataTypes.Wrapping> QueryWrappings() {
            return base.Channel.QueryWrappings();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<SharedDataTypes.Wrapping>> QueryWrappingsAsync() {
            return base.Channel.QueryWrappingsAsync();
        }
    }
}
